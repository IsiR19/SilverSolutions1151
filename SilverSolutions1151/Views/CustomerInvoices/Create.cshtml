@model SilverSolutions1151.Models.Entity.CustomerInvoice

@{
    ViewData["Title"] = "Create Invoice";
}

<h1>Create</h1>

<h4>CustomerInvoice</h4>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="InvoiceNumber" class="control-label"></label>
                <input asp-for="InvoiceNumber" class="form-control" />
                <span asp-validation-for="InvoiceNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="InvoiceDate" class="control-label"></label>
                <input asp-for="InvoiceDate" class="form-control" asp-format="{0:dd/MM/yyyy}  />
                <span asp-validation-for="InvoiceDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerName" class="control-label"></label>
                <input asp-for="CustomerName" class="form-control" />
                <span asp-validation-for="CustomerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerPhone" class="control-label"></label>
                <input type="text" id="customerName" class="form-control" />
                <span asp-validation-for="CustomerPhone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerAddress" class="control-label"></label>
                <input asp-for="CustomerAddress" class="form-control" />
                <span asp-validation-for="CustomerAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Vat" class="control-label"></label>
                <input asp-for="Vat" class="form-control" />
                <span asp-validation-for="Vat" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="button" id="add-row-button" class="btn btn-primary">Add Item</button>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <table class="table" id="invoice-items-table">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>Package Size(g)</th>
                                <th>Quantity</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        @if (Model != null && Model.InvoiceItems != null)
                        {
                            <tbody>

                                @foreach (var item in Model.InvoiceItems)
                                {
                                    <tr>
                                        <td>@item.Description</td>
                                        <td>@item.Weight</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.Price</td>
                                        <td><button type="button" class="btn btn-danger delete-row-button">Delete</button></td>
                                    </tr>
                                }
                            </tbody>
                        }
       
                    </table>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<br />
<div class="row justify-content-end">
    <div class="col-auto">
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary">Back</a>
    </div>
</div>
<script>
    var table = document.getElementById("invoice-items-table");
    var button = document.getElementById("add-row-button");

    button.onclick = function () {
        var row = table.insertRow(-1);
        var descriptionCell = row.insertCell(0);
        var weightCell = row.insertCell(1);
        var quantityCell = row.insertCell(2);
        var priceCell = row.insertCell(3);
        var deleteCell = row.insertCell(4);
        descriptionCell.innerHTML = '<input type="text" name="InvoiceItems[' + (table.rows.length - 2) + '].Description" class="form-control" />';
        weightCell.innerHTML = '<input type="text" name="InvoiceItems[' + (table.rows.length - 2) + '].Weight" class="form-control" />';
        quantityCell.innerHTML = '<input type="text" name="InvoiceItems[' + (table.rows.length - 2) + '].Quantity" class="form-control" />';
        priceCell.innerHTML = '<input type="text" name="InvoiceItems[' + (table.rows.length - 2) + '].Price" class="form-control" />';
        deleteCell.innerHTML = '<button type="button" class="btn btn-danger delete-row-button">Delete</button>';
        var deleteButtons = document.getElementsByClassName("delete-row-button");
        for (var i = 0; i < deleteButtons.length; i++) {
            deleteButtons[i].addEventListener("click", function () {
                this.parentNode.parentNode.remove();
            });
        }
    };
    var customerNameInput = document.getElementById("customerName");
    var customers = [];

    // Make an AJAX request to get the list of customers
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "@Url.Action("GetCustomers", "CustomerInvoices")");
    xhr.onload = function () {
        if (xhr.status === 200) {
            customers = JSON.parse(xhr.responseText);
        } else {
            console.log("Request failed. Returned status of " + xhr.status);
        }
    };
    xhr.send();

    // Add an event listener to the customerNameInput element
    customerNameInput.addEventListener("input", function () {
        var filteredCustomers = customers.filter(function (customer) {
            return customer.customerName.toLowerCase().indexOf(customerNameInput.value.toLowerCase()) !== -1;
        });
        var suggestions = filteredCustomers.map(function (customer) {
            return '<div class="autocomplete-item">' + customer.customerName + '</div>';
        }).join("");
        document.getElementById("autocomplete-container").innerHTML = suggestions;
    });

    // Add an event listener to the document to handle clicks on the autocomplete items
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("autocomplete-item")) {
            customerNameInput.value = event.target.innerText;
            document.getElementById("autocomplete-container").innerHTML = "";
        }
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
